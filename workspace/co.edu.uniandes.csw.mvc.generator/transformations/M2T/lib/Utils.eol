operation String toLowerFirst() : String{
 return ((self.charAt(0)+"").toLowerCase())+self.subString(1,self.length);
}
 
operation String toUpperFirst() : String{
 return ((self.charAt(0)+"").toUpperCase())+self.subString(1,self.length);
}

operation Class lowerName() : String{
	return self.name.toLowerCase();
}

operation Class DTOName() : String{
	return self.name.toUpperFirst().concat('DTO');
}

operation Class name() : String{
	return self.name.toUpperFirst();
}

operation Class toLower() : String{
	return self.name.toLowerCase();
}

operation Class jsFileName() : String{
	return self.name.firstToLowerCase();
}

operation Class toLowerFirst() : String{
	return self.name.firstToLowerCase();
}

operation String toLowerFirst() : String{
	return self.firstToLowerCase();
}

operation String toLower() : String{
	return self.toLowerCase();
}

operation Class basePckPath() : String {
 	return getBasePackagePath()+'/'+self.name.toLowerCase();
}

operation Class masterBasePckPath() : String {
 	return self.basePckPath()+"/master";
}

operation Class basePck() : String {
 	return getBasePackage()+'.'+self.name.toLowerCase();
}

function getBasePackagePath(){
 return 'co/edu/uniandes/csw';
}

function getBasePackage(){
 return 'co.edu.uniandes.csw';
}

operation Class getListTypeAttributes() {
 var resp = new List;
 for(attr in self.attribute){
  if(attr.ownedComment->size()>0){
   resp.add(attr);
  }
 }
 return resp;
}

operation Class master_src_dir() : String{
	return self.name.toLowerCase()+'.master.service.subsystem/src/main/java';
}

operation Class master_rsc_dir() : String{
	return self.name.toLowerCase()+'.master.service.subsystem/src/main/resources';
}

operation Class master_web_dir() : String{
	return self.name.toLowerCase()+'.master.service.subsystem/src/main/webapp';
}

@cache
operation Class subsystem_src_dir() : String{
	return self.name.toLowerCase()+'.service.subsystem/src/main/java';
}

operation Class subsystem_rsc_dir() : String{
	return self.name.toLowerCase()+'.service.subsystem/src/main/resources';
}

operation Class service_web_dir() : String{
	return self.name.toLowerCase()+'.service.subsystem.web/src/main/webapp';
}

operation Class service_src_dir() : String{
	return self.name.toLowerCase()+'.service.subsystem.web/src/main/java';
}

operation Class service_rsc_dir() : String{
	return self.name.toLowerCase()+'.service.subsystem.web/src/main/resources';
}

operation Class client_web_dir() : String{
	return self.name.toLowerCase()+'.web/src/main/webapp';
}

operation Class client_src_dir() : String{
	return self.name.toLowerCase()+'.web/src/main/java';
}

operation Class client_rsc_dir() : String{
	return self.name.toLowerCase()+'.web/src/main/resources';
}


@cache
function Class hasReferences() :Boolean{
	return self.getContainmentEntities().size()>0 or self.getSharedEntities().size()>0;
}

@cache
function Class getAllAssociatedEntities() : List{
 var resp = new List;
 resp.addAll(self.getContainmentEntities());
 resp.addAll(self.getSharedEntities());
 return resp;
}

@cache
function Class getContainmentEntities(){
    var classes = new List;
    for(asc in self.getAssociations()){
     if(asc.binary){
      // check that the first attribute is the type of the class
      var firstEnd = asc.getMemberEnds().first();
      var secondEnd =  asc.getMemberEnds().second();
      if(firstEnd.type=self and secondEnd.upperBound=-1 and secondEnd.aggregation.toString()='composite'){
       classes.add(secondEnd.type);
      }
     }
    }
    return classes;
} 

@cache
function Class getSharedEntities(){
    var classes = new List;
    for(asc in self.getAssociations()){
     if(asc.binary){
      // check that the first attribute is the type of the class
      var firstEnd = asc.getMemberEnds().first();
      var secondEnd =  asc.getMemberEnds().second();
      if(firstEnd.type=self and secondEnd.upperBound=-1 and secondEnd.aggregation.toString()='shared'){
       classes.add(secondEnd.type);
      }
     }
    }
    return classes;
}

function genFile(templName : String, targetFile: String, class: Any){
 var templateName : Template;
 var formatter : new Native("org.eclipse.epsilon.egl.formatter.language.JavaFormatter");
 templateName := TemplateFactory.load(templName+'.egl');
 templateName.populate('aClass', class);
 templateName.setFormatter(formatter);
 templateName.generate(targetFile);
 
 --if(not "_".isSubstringOf(templName)){ 
 --  templateName.generate(targetFile,false,false);
 --}else{
 -- templateName.generate(targetFile);
 --}

}

