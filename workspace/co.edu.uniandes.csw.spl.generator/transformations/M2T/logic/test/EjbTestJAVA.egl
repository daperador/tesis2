[% import "../../lib/Utils.eol";  %]
/*[%=license()%]*/

package [%=aClass.basePck()%].logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import [%=aClass.basePck()%].logic.dto.[%=aClass.DTOName()%];
import [%=aClass.basePck()%].logic.api.I[%=aClass.name()%]LogicService;
import [%=aClass.basePck()%].persistence.[%=aClass.name()%]Persistence;
import [%=aClass.basePck()%].persistence.api.I[%=aClass.name()%]Persistence;
import [%=aClass.basePck()%].persistence.entity.[%=aClass.name()%]Entity;
import [%=aClass.basePck()%].persistence.converter.[%=aClass.name()%]Converter;
import static [%=getBasePackage()%].util._TestUtil.*;

@RunWith(Arquillian.class)
public class [%=aClass.name%]LogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage([%=aClass.name()%]LogicService.class.getPackage())
				.addPackage(I[%=aClass.name()%]LogicService.class.getPackage())
				.addPackage([%=aClass.name()%]Persistence.class.getPackage())
				.addPackage([%=aClass.name()%]Entity.class.getPackage())
				.addPackage(I[%=aClass.name()%]Persistence.class.getPackage())
                .addPackage([%=aClass.name()%]DTO.class.getPackage())
                .addPackage([%=aClass.name()%]Converter.class.getPackage())
                .addPackage([%=aClass.name()%]Entity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private I[%=aClass.name()%]LogicService [%=aClass.name.toLowerFirst()%]LogicService;
	
	@Inject
	private I[%=aClass.name()%]Persistence [%=aClass.name.toLowerFirst()%]Persistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<[%=aClass.DTOName()%]> dtos=[%=aClass.name.toLowerFirst()%]Persistence.get[%=aClass.name()%]s();
		for([%=aClass.DTOName()%] dto:dtos){
			[%=aClass.name.toLowerFirst()%]Persistence.delete[%=aClass.name()%](dto.getId());
		}
	}

	private List<[%=aClass.DTOName()%]> data=new ArrayList<[%=aClass.DTOName()%]>();

	private void insertData() {
		for(int i=0;i<3;i++){
			[%=aClass.DTOName()%] pdto=new [%=aClass.DTOName()%]();
			[% for (attr in aClass.getAllAttributes()) { %]
			[% if (attr.name<>'id'){ if(attr.type.name<>'Date') {%]
			pdto.set[%=attr.name.toUpperFirst() %](generateRandom([%=attr.type.name %].class));
			[%}else{%]
			pdto.set[%=attr.name.toUpperFirst() %](generateRandomDate());
			[% }}} %]
			pdto=[%=aClass.name.toLowerFirst()%]Persistence.create[%=aClass.name%](pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void create[%=aClass.name.toUpperFirst()%]Test(){
		[%=aClass.DTOName()%] ldto=new [%=aClass.DTOName()%]();
		[% for (attr in aClass.getAllAttributes()) { %]
		[% if (attr.name<>'id'){ if(attr.type.name<>'Date') {%]
		ldto.set[%=attr.name.toUpperFirst() %](generateRandom([%=attr.type.name %].class));
		[%}else{%]
		ldto.set[%=attr.name.toUpperFirst() %](generateRandomDate());
		[% }}} %]
		
		
		[%=aClass.DTOName()%] result=[%=aClass.name.toLowerFirst()%]LogicService.create[%=aClass.name.toUpperFirst()%](ldto);
		
		Assert.assertNotNull(result);
		
		[%=aClass.DTOName()%] pdto=[%=aClass.name.toLowerFirst()%]Persistence.get[%=aClass.name%](result.getId());
		
		[% for (attr in aClass.getAllAttributes()) { %]
		[% if (attr.name<>'id'){ %]
		Assert.assertEquals(ldto.get[%=attr.name.toUpperFirst() %](), pdto.get[%=attr.name.toUpperFirst()%]());	
		[% }} %]
	}
	
	@Test
	public void get[%=aClass.name.toUpperFirst()%]sTest(){
		List<[%=aClass.DTOName()%]> list=[%=aClass.name.toLowerFirst()%]LogicService.get[%=aClass.name.toUpperFirst()%]s();
		Assert.assertEquals(list.size(), data.size());
        for([%=aClass.DTOName()%] ldto:list){
        	boolean found=false;
            for([%=aClass.DTOName()%] pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void get[%=aClass.name.toUpperFirst()%]Test(){
		[%=aClass.DTOName()%] pdto=data.get(0);
		[%=aClass.DTOName()%] ldto=[%=aClass.name.toLowerFirst()%]LogicService.get[%=aClass.name%](pdto.getId());
        Assert.assertNotNull(ldto);
        [% for (attr in aClass.getAllAttributes()) { %]
		[% if (attr.name<>'id') {%]
		Assert.assertEquals(pdto.get[%=attr.name.toUpperFirst() %](), ldto.get[%=attr.name.toUpperFirst() %]());
		[% }} %]        
	}
	
	@Test
	public void delete[%=aClass.name.toUpperFirst()%]Test(){
		[%=aClass.DTOName()%] pdto=data.get(0);
		[%=aClass.name.toLowerFirst()%]LogicService.delete[%=aClass.name%](pdto.getId());
        [%=aClass.DTOName()%] deleted=[%=aClass.name.toLowerFirst()%]Persistence.get[%=aClass.name%](pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void update[%=aClass.name.toUpperFirst()%]Test(){
		[%=aClass.DTOName()%] pdto=data.get(0);
		
		[%=aClass.DTOName()%] ldto=new [%=aClass.DTOName()%]();
		ldto.setId(pdto.getId());
		[% for (attr in aClass.getAllAttributes()) { %]
		[% if (attr.name<>'id'){ if(attr.type.name<>'Date') {%]
		ldto.set[%=attr.name.toUpperFirst() %](generateRandom([%=attr.type.name %].class));
		[%}else{%]
		ldto.set[%=attr.name.toUpperFirst() %](generateRandomDate());
		[% }}} %]
		
		
		[%=aClass.name.toLowerFirst()%]LogicService.update[%=aClass.name.toUpperFirst()%](ldto);
		
		
		[%=aClass.DTOName()%] resp=[%=aClass.name.toLowerFirst()%]Persistence.get[%=aClass.name%](pdto.getId());
		
		[% for (attr in aClass.getAllAttributes()) { %]
		[% if (attr.name<>'id') {%]
		Assert.assertEquals(ldto.get[%=attr.name.toUpperFirst() %](), resp.get[%=attr.name.toUpperFirst()%]());	
		[% }} %]
	}
	
	/*@Test
	public void get[%=aClass.name.toUpperFirst()%]PaginationTest(){
		
		[%=aClass.name.toUpperFirst()%]PageDTO dto1=[%=aClass.name.toLowerFirst()%]LogicService.get[%=aClass.name.toUpperFirst()%]s(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords(),2L);
		
		
		[%=aClass.name.toUpperFirst()%]PageDTO dto2=[%=aClass.name.toLowerFirst()%]LogicService.get[%=aClass.name.toUpperFirst()%]s(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),2);
        Assert.assertEquals(dto2.getTotalRecords(),2L);
		
		for([%=aClass.DTOName()%] dto:dto1.getRecords()){
        	boolean found=false;
            for([%=aClass.DTOName()%] pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for([%=aClass.DTOName()%] dto:dto2.getRecords()){
        	boolean found=false;
            for([%=aClass.DTOName()%] pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        [%=aClass.name.toUpperFirst()%]PageDTO dto3=[%=aClass.name.toLowerFirst()%]LogicService.get[%=aClass.name.toUpperFirst()%]s(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords(),data.size());
		
		for([%=aClass.DTOName()%] dto:dto3.getRecords()){
        	boolean found=false;
            for([%=aClass.DTOName()%] pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}*/
	
	
}