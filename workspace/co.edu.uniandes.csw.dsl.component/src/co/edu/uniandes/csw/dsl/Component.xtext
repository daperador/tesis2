// automatically generated by Xtext
grammar co.edu.uniandes.csw.dsl.Component with org.eclipse.xtext.common.Terminals

import "http://co.edu.uniandes.csw.mvc.annotate/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://co.edu.uniandes.csw.mvc/1.0" as mvc

Component returns mvc::Component:
	{mvc::Component}
	(imports+=Import)*
	
	(( annotations+=Annotation)* )?
	'Component' name=ID
	'{'
		('models' '{' models+=Model ( "," models+=Model)* '}' )?
		('views' '{' views+=View ( "," views+=View)* '}' )?
		('events' '{' events+=Event ( "," events+=Event)* '}' )?
		('controllers' '{' controllers+=Controller ( "," controllers+=Controller)* '}' )?
	'}';

Import returns mvc::Import:
	'import' importURI=STRING ';'
;
AnnotationAttributeValue returns AnnotationAttributeValue:
	SimpleValue;

UIComponent returns mvc::UIComponent:
	UILayout | UIInput | UIActions | UILabel;

UILayout returns mvc::UILayout: 
	'layout' name=ID '{'
		(components+=UIComponent)+
	'}'
;


Annotation returns Annotation:
	'@' annotationType=[AnnotationType]'('
		(attributes+=AnnotationAttribute ( "," attributes+=AnnotationAttribute)*)?
	')';

Model returns mvc::Model:
	{mvc::Model}
	(( annotations+=Annotation)* )?
	name=ID ':' rootEntity=[mvc::Entity]?';';

View returns mvc::View:
	{mvc::View}
	(( annotations+=Annotation)* )?
	name=ID
	'{'
		rootComponent=UILayout
	'}';

Event returns mvc::Event:
	{mvc::Event}
	(( annotations+=Annotation)* )?
	'Event' name=STRING ';'
	;

Controller returns mvc::Controller:
	{mvc::Controller}
	(( annotations+=Annotation)* )?
	name=ID
	'{'
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
		('views' '{' views+=ControllerView ( "," views+=ControllerView)* '}' )?
		('eventActions' '{' eventActions+=EventAction ( "," eventActions+=EventAction)* '}' )?
	'}';

AnnotationAttribute returns AnnotationAttribute:
	attribute=[AnnotationTypeAttribute]'='value=AnnotationAttributeValue
	;

SimpleValue returns SimpleValue:
	{SimpleValue}
	value=STRING;

UIInput returns mvc::UIInput:
	{mvc::UIInput}
	(( annotations+=Annotation)* )?
	'input'
	name=ID
	'{'
		('type' type=ID)?
		('value' value=[mvc::Attribute])?
	'}';

UIActions returns mvc::UIActions:
	{mvc::UIActions}
	(( annotations+=Annotation)* )?
	'action'
	name=ID
	'{'
		('type' type=STRING)?
		('triggerEvent' triggerEvent=[mvc::Event])?
	'}';

UILabel returns mvc::UILabel:
	{mvc::UILabel}
	(( annotations+=Annotation)* )?
	'label' name=ID
	'{'
		('type' type=STRING)?
		('text' text=STRING)?
		('value' value=[mvc::Attribute])?
	'}';

Action returns mvc::Action:
	{mvc::Action}
	(( annotations+=Annotation)* )?
	name=ID
	'{'
		('preExecutionEvent' preExecutionEvent=[mvc::Event])?
		('postExecutionEvent' postExecutionEvent=[mvc::Event])?
		('triggerEvents' '(' triggerEvents+=[mvc::Event] ( "," triggerEvents+=[mvc::Event])* ')' )?
	'}';

ControllerView returns mvc::ControllerView:
	(( annotations+=Annotation)* )?
	'view' view=[mvc::View]
	('models' '(' models+=[mvc::Model] ( "," models+=[mvc::Model])* ')' )?
	';';

EventAction returns mvc::EventAction:
	(( annotations+=Annotation)* )?
	'EventAction'
	'{'
		'action' action=[mvc::Action]
		('events' '(' events+=[mvc::Event] ( "," events+=[mvc::Event])* ')' )?
	'}';
