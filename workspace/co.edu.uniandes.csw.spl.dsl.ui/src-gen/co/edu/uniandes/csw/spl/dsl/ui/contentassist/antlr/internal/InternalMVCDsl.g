/*
* generated by Xtext
*/
grammar InternalMVCDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package co.edu.uniandes.csw.spl.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package co.edu.uniandes.csw.spl.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import co.edu.uniandes.csw.spl.dsl.services.MVCDslGrammarAccess;

}

@parser::members {
 
 	private MVCDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MVCDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMVCModel
entryRuleMVCModel 
:
{ before(grammarAccess.getMVCModelRule()); }
	 ruleMVCModel
{ after(grammarAccess.getMVCModelRule()); } 
	 EOF 
;

// Rule MVCModel
ruleMVCModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMVCModelAccess().getGroup()); }
(rule__MVCModel__Group__0)
{ after(grammarAccess.getMVCModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotationAttributeValue
entryRuleAnnotationAttributeValue 
:
{ before(grammarAccess.getAnnotationAttributeValueRule()); }
	 ruleAnnotationAttributeValue
{ after(grammarAccess.getAnnotationAttributeValueRule()); } 
	 EOF 
;

// Rule AnnotationAttributeValue
ruleAnnotationAttributeValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAttributeValueAccess().getSimpleValueParserRuleCall()); }
	ruleSimpleValue
{ after(grammarAccess.getAnnotationAttributeValueAccess().getSimpleValueParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotationAttribute
entryRuleAnnotationAttribute 
:
{ before(grammarAccess.getAnnotationAttributeRule()); }
	 ruleAnnotationAttribute
{ after(grammarAccess.getAnnotationAttributeRule()); } 
	 EOF 
;

// Rule AnnotationAttribute
ruleAnnotationAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAttributeAccess().getGroup()); }
(rule__AnnotationAttribute__Group__0)
{ after(grammarAccess.getAnnotationAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleValue
entryRuleSimpleValue 
:
{ before(grammarAccess.getSimpleValueRule()); }
	 ruleSimpleValue
{ after(grammarAccess.getSimpleValueRule()); } 
	 EOF 
;

// Rule SimpleValue
ruleSimpleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleValueAccess().getGroup()); }
(rule__SimpleValue__Group__0)
{ after(grammarAccess.getSimpleValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MVCModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__0__Impl
	rule__MVCModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getMVCModelAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__1__Impl
	rule__MVCModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getImportURIAssignment_1()); }
(rule__MVCModel__ImportURIAssignment_1)
{ after(grammarAccess.getMVCModelAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__2__Impl
	rule__MVCModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getMVCModelAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__3__Impl
	rule__MVCModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getAnnotationsAssignment_3()); }
(rule__MVCModel__AnnotationsAssignment_3)*
{ after(grammarAccess.getMVCModelAccess().getAnnotationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__4__Impl
	rule__MVCModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getMVCModelKeyword_4()); }

	'MVCModel' 

{ after(grammarAccess.getMVCModelAccess().getMVCModelKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__5__Impl
	rule__MVCModel__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getNameAssignment_5()); }
(rule__MVCModel__NameAssignment_5)
{ after(grammarAccess.getMVCModelAccess().getNameAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__6__Impl
	rule__MVCModel__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getGroup_6()); }
(rule__MVCModel__Group_6__0)?
{ after(grammarAccess.getMVCModelAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__7__Impl
	rule__MVCModel__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getLeftCurlyBracketKeyword_7()); }

	'{' 

{ after(grammarAccess.getMVCModelAccess().getLeftCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__8__Impl
	rule__MVCModel__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getComponentsKeyword_8()); }

	'components' 

{ after(grammarAccess.getMVCModelAccess().getComponentsKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__9__Impl
	rule__MVCModel__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getLeftCurlyBracketKeyword_9()); }

	'{' 

{ after(grammarAccess.getMVCModelAccess().getLeftCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__10__Impl
	rule__MVCModel__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getComponentsAssignment_10()); }
(rule__MVCModel__ComponentsAssignment_10)
{ after(grammarAccess.getMVCModelAccess().getComponentsAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__11__Impl
	rule__MVCModel__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getGroup_11()); }
(rule__MVCModel__Group_11__0)*
{ after(grammarAccess.getMVCModelAccess().getGroup_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__12__Impl
	rule__MVCModel__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getRightCurlyBracketKeyword_12()); }

	'}' 

{ after(grammarAccess.getMVCModelAccess().getRightCurlyBracketKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getRightCurlyBracketKeyword_13()); }

	'}' 

{ after(grammarAccess.getMVCModelAccess().getRightCurlyBracketKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}






























rule__MVCModel__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group_6__0__Impl
	rule__MVCModel__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getVersionKeyword_6_0()); }

	'version' 

{ after(grammarAccess.getMVCModelAccess().getVersionKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getVersionAssignment_6_1()); }
(rule__MVCModel__VersionAssignment_6_1)
{ after(grammarAccess.getMVCModelAccess().getVersionAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MVCModel__Group_11__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group_11__0__Impl
	rule__MVCModel__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group_11__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getCommaKeyword_11_0()); }

	',' 

{ after(grammarAccess.getMVCModelAccess().getCommaKeyword_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MVCModel__Group_11__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MVCModel__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__Group_11__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getComponentsAssignment_11_1()); }
(rule__MVCModel__ComponentsAssignment_11_1)
{ after(grammarAccess.getMVCModelAccess().getComponentsAssignment_11_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationTypeAssignment_1()); }
(rule__Annotation__AnnotationTypeAssignment_1)
{ after(grammarAccess.getAnnotationAccess().getAnnotationTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__2__Impl
	rule__Annotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__3__Impl
	rule__Annotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_3()); }
(rule__Annotation__Group_3__0)?
{ after(grammarAccess.getAnnotationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Annotation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_3__0__Impl
	rule__Annotation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAttributesAssignment_3_0()); }
(rule__Annotation__AttributesAssignment_3_0)
{ after(grammarAccess.getAnnotationAccess().getAttributesAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_3_1()); }
(rule__Annotation__Group_3_1__0)*
{ after(grammarAccess.getAnnotationAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_3_1__0__Impl
	rule__Annotation__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getAnnotationAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAttributesAssignment_3_1_1()); }
(rule__Annotation__AttributesAssignment_3_1_1)
{ after(grammarAccess.getAnnotationAccess().getAttributesAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationAttribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationAttribute__Group__0__Impl
	rule__AnnotationAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationAttribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAttributeAccess().getAttributeAssignment_0()); }
(rule__AnnotationAttribute__AttributeAssignment_0)
{ after(grammarAccess.getAnnotationAttributeAccess().getAttributeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationAttribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationAttribute__Group__1__Impl
	rule__AnnotationAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationAttribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAttributeAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAnnotationAttributeAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationAttribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationAttribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationAttribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAttributeAccess().getValueAssignment_2()); }
(rule__AnnotationAttribute__ValueAssignment_2)?
{ after(grammarAccess.getAnnotationAttributeAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleValue__Group__0__Impl
	rule__SimpleValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleValueAccess().getSimpleValueAction_0()); }
(

)
{ after(grammarAccess.getSimpleValueAccess().getSimpleValueAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleValueAccess().getValueAssignment_1()); }
(rule__SimpleValue__ValueAssignment_1)
{ after(grammarAccess.getSimpleValueAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__MVCModel__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getMVCModelAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__AnnotationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getAnnotationsAnnotationParserRuleCall_3_0()); }
	ruleAnnotation{ after(grammarAccess.getMVCModelAccess().getAnnotationsAnnotationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__NameAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getNameIDTerminalRuleCall_5_0()); }
	RULE_ID{ after(grammarAccess.getMVCModelAccess().getNameIDTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__VersionAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getVersionSTRINGTerminalRuleCall_6_1_0()); }
	RULE_STRING{ after(grammarAccess.getMVCModelAccess().getVersionSTRINGTerminalRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__ComponentsAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getComponentsComponentCrossReference_10_0()); }
(
{ before(grammarAccess.getMVCModelAccess().getComponentsComponentIDTerminalRuleCall_10_0_1()); }
	RULE_ID{ after(grammarAccess.getMVCModelAccess().getComponentsComponentIDTerminalRuleCall_10_0_1()); }
)
{ after(grammarAccess.getMVCModelAccess().getComponentsComponentCrossReference_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MVCModel__ComponentsAssignment_11_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMVCModelAccess().getComponentsComponentCrossReference_11_1_0()); }
(
{ before(grammarAccess.getMVCModelAccess().getComponentsComponentIDTerminalRuleCall_11_1_0_1()); }
	RULE_ID{ after(grammarAccess.getMVCModelAccess().getComponentsComponentIDTerminalRuleCall_11_1_0_1()); }
)
{ after(grammarAccess.getMVCModelAccess().getComponentsComponentCrossReference_11_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AnnotationTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationTypeAnnotationTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationTypeAnnotationTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAnnotationAccess().getAnnotationTypeAnnotationTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getAnnotationAccess().getAnnotationTypeAnnotationTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AttributesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAttributesAnnotationAttributeParserRuleCall_3_0_0()); }
	ruleAnnotationAttribute{ after(grammarAccess.getAnnotationAccess().getAttributesAnnotationAttributeParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AttributesAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAttributesAnnotationAttributeParserRuleCall_3_1_1_0()); }
	ruleAnnotationAttribute{ after(grammarAccess.getAnnotationAccess().getAttributesAnnotationAttributeParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationAttribute__AttributeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAttributeAccess().getAttributeAnnotationTypeAttributeCrossReference_0_0()); }
(
{ before(grammarAccess.getAnnotationAttributeAccess().getAttributeAnnotationTypeAttributeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAnnotationAttributeAccess().getAttributeAnnotationTypeAttributeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAnnotationAttributeAccess().getAttributeAnnotationTypeAttributeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationAttribute__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAttributeAccess().getValueAnnotationAttributeValueParserRuleCall_2_0()); }
	ruleAnnotationAttributeValue{ after(grammarAccess.getAnnotationAttributeAccess().getValueAnnotationAttributeValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleValueAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getSimpleValueAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


